"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMongoClientWithIAMRole = void 0;
// mongodb.ts
const mongodb_1 = require("mongodb");
const aws_sdk_1 = require("aws-sdk");
let client = null;
const sts = new aws_sdk_1.STS();
// IAM Role ARN that we created earlier and added to MongoDB Atlas
const ACCESS_ROLE_ARN = process.env.MONGODB_ACCESS_ROLE_ARN;
const CLUSTER_NAME = process.env.MONGODB_CLUSTER_NAME; // e.g. cluster-name.asdf
/**
 * Instantiates a {@link MongoClient} if one doesn't already exist.
 * We cache it to limit the number of open connections.
 *
 * Requires environment variable `MONGODB_ACCESS_ROLE_ARN` which references an IAM role ARN.
 * The Resource will need permissions to assume this role.
 */
const getMongoClientWithIAMRole = async () => {
    console.log('Getting mongo client');
    if (client) {
        console.log('Returning mongo client in cache');
        return client;
    }
    const { Credentials } = await sts
        .assumeRole({
        RoleArn: ACCESS_ROLE_ARN,
        RoleSessionName: 'AccessMongoDB',
    })
        .promise();
    if (!Credentials) {
        throw new Error('Failed to assume mongo db IAM role');
    }
    // Create connection string
    const { AccessKeyId, SessionToken, SecretAccessKey } = Credentials;
    const encodedSecretKey = encodeURIComponent(SecretAccessKey);
    const combo = `${AccessKeyId}:${encodedSecretKey}`;
    const url = new URL(`mongodb+srv://${combo}@${CLUSTER_NAME}.mongodb.net`);
    url.searchParams.set('authSource', '$external');
    url.searchParams.set('authMechanismProperties', `AWS_SESSION_TOKEN:${SessionToken}`);
    url.searchParams.set('w', 'majority');
    url.searchParams.set('retryWrites', 'true');
    url.searchParams.set('authMechanism', 'MONGODB-AWS');
    const mongoClient = new mongodb_1.MongoClient(url.toString());
    client = await mongoClient.connect();
    console.log('Successfully connected to mongo db, returning mongo client');
    return client;
};
exports.getMongoClientWithIAMRole = getMongoClientWithIAMRole;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZ29kYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1vbmdvZGIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsYUFBYTtBQUNiLHFDQUFzQztBQUN0QyxxQ0FBOEI7QUFFOUIsSUFBSSxNQUFNLEdBQXVCLElBQUksQ0FBQztBQUN0QyxNQUFNLEdBQUcsR0FBRyxJQUFJLGFBQUcsRUFBRSxDQUFDO0FBQ3RCLGtFQUFrRTtBQUNsRSxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFBO0FBQzNELE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUEsQ0FBQyx5QkFBeUI7QUFFL0U7Ozs7OztHQU1HO0FBQ0ksTUFBTSx5QkFBeUIsR0FBRyxLQUFLLElBQUksRUFBRTtJQUNsRCxPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFDcEMsSUFBSSxNQUFNLEVBQUU7UUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7UUFDL0MsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUNELE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxNQUFNLEdBQUc7U0FDOUIsVUFBVSxDQUFDO1FBQ1YsT0FBTyxFQUFFLGVBQWU7UUFDeEIsZUFBZSxFQUFFLGVBQWU7S0FDakMsQ0FBQztTQUNELE9BQU8sRUFBRSxDQUFDO0lBRWYsSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7S0FDckQ7SUFFRCwyQkFBMkI7SUFDM0IsTUFBTSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLEdBQUcsV0FBVyxDQUFDO0lBQ25FLE1BQU0sZ0JBQWdCLEdBQUcsa0JBQWtCLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDN0QsTUFBTSxLQUFLLEdBQUcsR0FBRyxXQUFXLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztJQUNuRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsS0FBSyxJQUFJLFlBQVksY0FBYyxDQUFDLENBQUM7SUFDMUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2hELEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUNsQix5QkFBeUIsRUFDekIscUJBQXFCLFlBQVksRUFBRSxDQUNwQyxDQUFDO0lBQ0YsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3RDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM1QyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFFckQsTUFBTSxXQUFXLEdBQUcsSUFBSSxxQkFBVyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sR0FBRyxNQUFNLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUVyQyxPQUFPLENBQUMsR0FBRyxDQUFDLDREQUE0RCxDQUFDLENBQUM7SUFDMUUsT0FBTyxNQUFNLENBQUM7QUFDZCxDQUFDLENBQUM7QUFwQ1csUUFBQSx5QkFBeUIsNkJBb0NwQyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4vLyBtb25nb2RiLnRzXHJcbmltcG9ydCB7IE1vbmdvQ2xpZW50IH0gZnJvbSAnbW9uZ29kYic7XHJcbmltcG9ydCB7IFNUUyB9IGZyb20gJ2F3cy1zZGsnO1xyXG5cclxubGV0IGNsaWVudDogbnVsbCB8IE1vbmdvQ2xpZW50ID0gbnVsbDtcclxuY29uc3Qgc3RzID0gbmV3IFNUUygpO1xyXG4vLyBJQU0gUm9sZSBBUk4gdGhhdCB3ZSBjcmVhdGVkIGVhcmxpZXIgYW5kIGFkZGVkIHRvIE1vbmdvREIgQXRsYXNcclxuY29uc3QgQUNDRVNTX1JPTEVfQVJOID0gcHJvY2Vzcy5lbnYuTU9OR09EQl9BQ0NFU1NfUk9MRV9BUk5cclxuY29uc3QgQ0xVU1RFUl9OQU1FID0gcHJvY2Vzcy5lbnYuTU9OR09EQl9DTFVTVEVSX05BTUUgLy8gZS5nLiBjbHVzdGVyLW5hbWUuYXNkZlxyXG5cclxuLyoqXHJcbiAqIEluc3RhbnRpYXRlcyBhIHtAbGluayBNb25nb0NsaWVudH0gaWYgb25lIGRvZXNuJ3QgYWxyZWFkeSBleGlzdC5cclxuICogV2UgY2FjaGUgaXQgdG8gbGltaXQgdGhlIG51bWJlciBvZiBvcGVuIGNvbm5lY3Rpb25zLlxyXG4gKlxyXG4gKiBSZXF1aXJlcyBlbnZpcm9ubWVudCB2YXJpYWJsZSBgTU9OR09EQl9BQ0NFU1NfUk9MRV9BUk5gIHdoaWNoIHJlZmVyZW5jZXMgYW4gSUFNIHJvbGUgQVJOLlxyXG4gKiBUaGUgUmVzb3VyY2Ugd2lsbCBuZWVkIHBlcm1pc3Npb25zIHRvIGFzc3VtZSB0aGlzIHJvbGUuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0TW9uZ29DbGllbnRXaXRoSUFNUm9sZSA9IGFzeW5jICgpID0+IHtcclxuICBjb25zb2xlLmxvZygnR2V0dGluZyBtb25nbyBjbGllbnQnKTtcclxuICBpZiAoY2xpZW50KSB7XHJcbiAgICBjb25zb2xlLmxvZygnUmV0dXJuaW5nIG1vbmdvIGNsaWVudCBpbiBjYWNoZScpO1xyXG4gICAgcmV0dXJuIGNsaWVudDtcclxuICB9XHJcbiAgY29uc3QgeyBDcmVkZW50aWFscyB9ID0gYXdhaXQgc3RzXHJcbiAgICAuYXNzdW1lUm9sZSh7XHJcbiAgICAgIFJvbGVBcm46IEFDQ0VTU19ST0xFX0FSTixcclxuICAgICAgUm9sZVNlc3Npb25OYW1lOiAnQWNjZXNzTW9uZ29EQicsXHJcbiAgICB9KVxyXG4gICAgLnByb21pc2UoKTtcclxuXHJcbmlmICghQ3JlZGVudGlhbHMpIHtcclxudGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gYXNzdW1lIG1vbmdvIGRiIElBTSByb2xlJyk7XHJcbn1cclxuXHJcbi8vIENyZWF0ZSBjb25uZWN0aW9uIHN0cmluZ1xyXG5jb25zdCB7IEFjY2Vzc0tleUlkLCBTZXNzaW9uVG9rZW4sIFNlY3JldEFjY2Vzc0tleSB9ID0gQ3JlZGVudGlhbHM7XHJcbmNvbnN0IGVuY29kZWRTZWNyZXRLZXkgPSBlbmNvZGVVUklDb21wb25lbnQoU2VjcmV0QWNjZXNzS2V5KTtcclxuY29uc3QgY29tYm8gPSBgJHtBY2Nlc3NLZXlJZH06JHtlbmNvZGVkU2VjcmV0S2V5fWA7XHJcbmNvbnN0IHVybCA9IG5ldyBVUkwoYG1vbmdvZGIrc3J2Oi8vJHtjb21ib31AJHtDTFVTVEVSX05BTUV9Lm1vbmdvZGIubmV0YCk7XHJcbnVybC5zZWFyY2hQYXJhbXMuc2V0KCdhdXRoU291cmNlJywgJyRleHRlcm5hbCcpO1xyXG51cmwuc2VhcmNoUGFyYW1zLnNldChcclxuICAnYXV0aE1lY2hhbmlzbVByb3BlcnRpZXMnLFxyXG4gIGBBV1NfU0VTU0lPTl9UT0tFTjoke1Nlc3Npb25Ub2tlbn1gLFxyXG4pO1xyXG51cmwuc2VhcmNoUGFyYW1zLnNldCgndycsICdtYWpvcml0eScpO1xyXG51cmwuc2VhcmNoUGFyYW1zLnNldCgncmV0cnlXcml0ZXMnLCAndHJ1ZScpO1xyXG51cmwuc2VhcmNoUGFyYW1zLnNldCgnYXV0aE1lY2hhbmlzbScsICdNT05HT0RCLUFXUycpO1xyXG5cclxuY29uc3QgbW9uZ29DbGllbnQgPSBuZXcgTW9uZ29DbGllbnQodXJsLnRvU3RyaW5nKCkpO1xyXG5jbGllbnQgPSBhd2FpdCBtb25nb0NsaWVudC5jb25uZWN0KCk7XHJcblxyXG5jb25zb2xlLmxvZygnU3VjY2Vzc2Z1bGx5IGNvbm5lY3RlZCB0byBtb25nbyBkYiwgcmV0dXJuaW5nIG1vbmdvIGNsaWVudCcpO1xyXG5yZXR1cm4gY2xpZW50O1xyXG59OyJdfQ==